import cv2

img = cv2.imread(r'C:\Users\i-asya\Desktop\Software\BV-Tutorial\Step6\Basis6.png', 1)

def Threshold(img, threshold_value):
    height, width, depth = img.shape
    output_img = img.copy()

    for y in range(height):
        for x in range(width):
            for d in range(depth):
                if img[y][x][d] >= threshold_value:
                    output_img[y][x][d] = 0  
                else:
                    output_img[y][x][d] = 255
    return output_img
    
def colored_pic(thresholded_img):
    height, width, d = img.shape
    output_img = thresholded_img.copy()

    for y in range(height):
        for x in range(width):
            if (thresholded_img[y, x]==(255, 255, 255)).any():
                if y > 128 and y < 170:
                    if x> 135 and x <160:
                        output_img[y:y+30, x: x+30]=(0, 255, 0)
                    elif x > 190 and x <220:
                        output_img[y:y+30, x: x+30]=(128, 0, 255)
                    elif x > 250 and x <300:
                        output_img[y:y+30, x: x+30]=(0, 0, 255)
                    elif x > 300 and x <350:
                        output_img[y:y+30, x: x+30]=(0, 128, 255)
                        
                elif y > 195 and y < 240:
                    if x> 135 and x <160:
                        output_img[y:y+30, x: x+30]=(0, 0, 255)
                    elif x > 190 and x <220:
                        output_img[y:y+30, x: x+30]=(255, 0, 0)
                    elif x > 250 and x <310:
                        output_img[y:y+30, x: x+30]=(255, 0, 255)
                    elif x > 310 and x <350:
                        output_img[y:y+30, x: x+30]=(128, 128, 255)
                if y> 260:
                    output_img[y:y+30, x: x+30]=(0, 255, 255)
                    
            else: 
                    output_img[y,x]= thresholded_img[y, x]
                
    return output_img

threshold_value = 230
thresholded_img = Threshold(img, threshold_value)
colored_img= colored_pic(thresholded_img)


cv2.imshow('Original Image', img)
cv2.imshow('Thresholded Image', thresholded_img)
cv2.imshow('Colored Image', colored_img)
cv2.waitKey(0)
cv2.destroyAllWindows()
--------------------------------------------------------------------
import cv2

img = cv2.imread(r'C:\Users\i-asya\Desktop\Software\BV-Tutorial\Step6\Basis6.png', 1)
colors = [(255, 0, 0), (0, 255, 0), (0, 0, 255),(255,0,255),(255,255,0),(0,255,255)]

def Threshold(img, threshold_value):
    height, width, depth = img.shape
    output_img = img.copy()

    for y in range(height):
        for x in range(width):
            for d in range(depth):
                if img[y][x][d] >= threshold_value:
                    output_img[y][x][d] = 0  
                else:
                    output_img[y][x][d] = 255
    return output_img
    
def colored_pic(thresholded_img, kernel_size):
    height, width, d = img.shape
    objekte=0
    background=0
    
    step= kernel_size//2
    in_size= kernel_size * kernel_size
    kernel=[[1] * width for _ in range(in_size)]
    
    output_img = thresholded_img.copy()

    #Erstens: Bild durchgehen
    for y in range(step, height- step):
        for x in range(step, width- step): 
            n=0
            s=0
            for ky in range(y-step, y+step+1):
                for kx in range(x-step, x+step+1):
                    kernel[s][n]= img[ky][kx]# erst abschreiben, spÃ¤ter multipl.
                    n+=1  
                s+=1
            #statt sort() folgt..
            for k in range(in_size):
                for m in range(in_size):
                    if kernel[m] > kernel[k]:
                        kernel[m], kernel[k]= kernel[k], kernel[m]
                        
            median_wert= kernel[in_size//2]
            if median_wert== 255:
                kernel[k][m]=colors[objekte]
                output_img[y][x]=kernel[k][m]
                objekte+=1
            else:
                background+=1
                output_img[y][x]=0      
            
    return output_img

                
kernel_size=3
threshold_value = 230
thresholded_img = Threshold(img, threshold_value)
colored_img= colored_pic(thresholded_img, kernel_size)


cv2.imshow('Original Image', img)
cv2.imshow('Thresholded Image', thresholded_img)
cv2.imshow('Colored Image', colored_img)
cv2.waitKey(0)
cv2.destroyAllWindows()